import { useState, useEffect, useRef } from "react";
import React, { Suspense } from "react";
import { lazySafe, NullView } from "@/components/util/SafeLazy";

// IMPORTANT: Lazy-load big components to avoid transient import/HMR cycles
const Dashboard = lazySafe(
  () => import("@/pages/Dashboard.jsx"),
  () => Promise.resolve({ default: NullView })
);
const Header = lazySafe(
  () => import("@/components/Header.jsx"),
  () => Promise.resolve({ default: NullView })
);
// const AppShell = React.lazy(() => import("@/components/AppShell.jsx")); // Removed to avoid duplicate health checks

import {
  Home,
  Bell,
  FileText,
  Bookmark,
  Truck,
  BarChart3,
  User,
  Users,
  Building2,
  Link as LinkIcon,
  Settings,
  Target,
  Globe,
  Zap,
  Package,
  Shield,
  Search,
  Sun,
  Moon,
  MapPin,
  Route,
  Ship,
  Plane,
  Train,
  Clock,
  DollarSign,
  ShoppingCart,
  Phone,
  Calculator,
  Upload,
  CheckCircle,
  XCircle,
  Clock as ClockIcon
} from "lucide-react";

// UI Error Boundary for component-level error handling
class UIErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, err: null };
  }
  static getDerivedStateFromError(err) {
    return { hasError: true, err };
  }
  componentDidCatch(error, info) {
    console.error("UIErrorBoundary caught:", error, info);
    window.__UI_LAST_ERROR__ = { error, info };
  }
  render() {
    if (this.state.hasError) {
      return (
        <div className="p-6">
          <div className="max-w-xl mx-auto text-sm">
            <div className="font-semibold mb-1">UI crashed</div>
            <div className="text-muted-foreground mb-3">Check console for details. You can continue; other routes/pages still work.</div>
            <button
              onClick={() => this.setState({ hasError: false, err: null })}
              className="px-3 py-1.5 rounded border"
            >
              Reset this view
            </button>
            {process.env.NODE_ENV !== 'production' && this.state.err && (
              <pre className="mt-3 bg-gray-50 p-3 rounded overflow-auto">{String(this.state.err?.stack || this.state.err)}</pre>
            )}
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

// Safe interval hook for StrictMode compatibility
function useSafeInterval(setter, ms) {
  const ref = useRef(null);
  useEffect(() => {
    ref.current = setInterval(setter, ms);
    return () => ref.current && clearInterval(ref.current);
  }, [ms, setter]);
}

/* ===============================
   Demo Booking Page Component
   =============================== */
function DemoPage({ setShowDemoPage, setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setShowLoginPopup }) {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    company: '',
    phone: '',
    role: '',
    companySize: '',
    message: ''
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle form submission here
    console.log('Demo form submitted:', formData);
    // You can add API call here
    alert('Thank you for your interest! We\'ll be in touch soon.');
    setShowDemoPage(false);
  };

  const keyFeatures = [
    {
      title: "AI-Powered Sourcing",
      description: "Find the perfect suppliers with our intelligent matching algorithm"
    },
    {
      title: "Real-Time Tracking",
      description: "Monitor your orders and shipments from factory to warehouse"
    },
    {
      title: "Integrated Logistics",
      description: "Optimize shipping routes and reduce delivery times"
    },
    {
      title: "Financial Analytics",
      description: "Track costs, margins, and profitability across your supply chain"
    }
  ];

  return (
    <div className="fixed inset-0 z-[9999] overflow-y-auto bg-white">
      {/* Glass floating header */}
      <PageHeader 
        setShowOverviewPage={setShowOverviewPage}
        setShowFeaturesPage={setShowFeaturesPage}
        setShowAboutPage={setShowAboutPage}
        setShowDemoPage={setShowDemoPage}
        setShowLoginPopup={setShowLoginPopup}
      />

      {/* Main content */}
      <div className="flex min-h-screen pt-20">
        {/* Left side - Form */}
        <div className="flex-1 bg-white px-10 py-16 relative z-10">
          <div className="mx-auto max-w-2xl">
            {/* Header */}
            <div className="mb-12 text-left">
              <h1 className="mb-4 text-5xl font-light tracking-[-0.04em] text-black">
                Book a Demo
              </h1>
              <p className="text-lg text-gray-600">
                See how SLA can transform your sourcing operations
              </p>
            </div>

            {/* Key Features */}
            <div className="mb-12">
              <h2 className="mb-6 text-2xl font-semibold text-gray-900">Why Choose SLA?</h2>
              <div className="grid grid-cols-2 gap-6">
                {keyFeatures.map((feature, index) => (
                  <div key={index} className="rounded-lg border border-gray-200 p-4">
                    <h3 className="mb-2 text-lg font-semibold text-gray-900">{feature.title}</h3>
                    <p className="text-sm text-gray-600">{feature.description}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Form */}
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                    First Name *
                  </label>
                  <input
                    type="text"
                    id="firstName"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                    className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">
                    Last Name *
                  </label>
                  <input
                    type="text"
                    id="lastName"
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleInputChange}
                    required
                    className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                  />
                </div>
              </div>

              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  required
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                />
              </div>

              <div>
                <label htmlFor="company" className="block text-sm font-medium text-gray-700 mb-2">
                  Company *
                </label>
                <input
                  type="text"
                  id="company"
                  name="company"
                  value={formData.company}
                  onChange={handleInputChange}
                  required
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
                    Phone Number
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-2">
                    Role
                  </label>
                  <select
                    id="role"
                    name="role"
                    value={formData.role}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                  >
                    <option value="">Select your role</option>
                    <option value="ceo">CEO</option>
                    <option value="cto">CTO</option>
                    <option value="procurement">Procurement Manager</option>
                    <option value="operations">Operations Manager</option>
                    <option value="supply-chain">Supply Chain Manager</option>
                    <option value="other">Other</option>
                  </select>
                </div>
              </div>

              <div>
                <label htmlFor="companySize" className="block text-sm font-medium text-gray-700 mb-2">
                  Company Size
                </label>
                <select
                  id="companySize"
                  name="companySize"
                  value={formData.companySize}
                  onChange={handleInputChange}
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                >
                  <option value="">Select company size</option>
                  <option value="1-10">1-10 employees</option>
                  <option value="11-50">11-50 employees</option>
                  <option value="51-200">51-200 employees</option>
                  <option value="201-500">201-500 employees</option>
                  <option value="500+">500+ employees</option>
                </select>
              </div>

              <div>
                <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-2">
                  Tell us about your sourcing needs
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  rows={4}
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                  placeholder="What challenges are you facing with your current sourcing process?"
                />
              </div>

              <button
                type="submit"
                className="w-full rounded-lg bg-emerald-500 px-8 py-4 text-lg font-medium text-white transition hover:bg-emerald-600 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2"
              >
                Schedule My Demo
              </button>
            </form>
          </div>
        </div>

        {/* Right side - Background image with blur blend */}
        <div className="relative w-1/2 min-h-screen">
          <img 
            src="/images/factory-background.png"
            alt="Factory background"
            className="absolute inset-0 w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-r from-white via-white/80 via-white/40 to-transparent" />
          <div className="absolute inset-0 bg-gradient-to-r from-white/60 via-white/20 to-transparent" />
        </div>
      </div>
    </div>
  );
}

/* ===============================
   Login Popup Component
   =============================== */
function LoginPopup({ setShowLoginPopup, setShowDemoPage, setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setHasStartedChat }) {
  const [formData, setFormData] = useState({
    emailOrPhone: '',
    password: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.emailOrPhone.trim()) {
      newErrors.emailOrPhone = 'Email or phone number is required';
    } else if (!/^[\w\.-]+@[\w\.-]+\.\w+$/.test(formData.emailOrPhone) && !/^\+?[\d\s\-\(\)]+$/.test(formData.emailOrPhone)) {
      newErrors.emailOrPhone = 'Please enter a valid email or phone number';
    }
    
    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For demo purposes, accept any valid email/phone and password
      console.log('Login attempt:', formData);
      
      // Close popup and all pages, then go to dashboard
      setShowLoginPopup(false);
      setShowDemoPage(false);
      setShowOverviewPage(false);
      setShowFeaturesPage(false);
      setShowAboutPage(false);
      setHasStartedChat(true);
      
    } catch (error) {
      console.error('Login error:', error);
      setErrors({ general: 'Login failed. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleForgotPassword = () => {
    // For now, just show an alert
    alert('Forgot password functionality will be implemented soon. Please contact support for assistance.');
  };

  const handleCreateAccount = () => {
    setShowLoginPopup(false);
    setShowDemoPage(true);
  };

  return (
    <div className="fixed inset-0 z-[10001] flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="relative w-full max-w-md rounded-2xl bg-white p-8 shadow-2xl">
        {/* Close button */}
        <button
          onClick={() => setShowLoginPopup(false)}
          className="absolute right-4 top-4 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <XCircle className="h-6 w-6" />
        </button>

        {/* Header */}
        <div className="mb-8 text-center">
          <h2 className="mb-2 text-2xl font-bold text-gray-900">Welcome Back</h2>
          <p className="text-gray-600">Sign in to your SLA account</p>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* General error */}
          {errors.general && (
            <div className="rounded-lg bg-red-50 p-3 text-sm text-red-600">
              {errors.general}
            </div>
          )}

          {/* Email/Phone field */}
          <div>
            <label htmlFor="emailOrPhone" className="mb-2 block text-sm font-medium text-gray-700">
              Email or Phone Number
            </label>
            <input
              type="text"
              id="emailOrPhone"
              name="emailOrPhone"
              value={formData.emailOrPhone}
              onChange={handleInputChange}
              placeholder="Enter your email or phone number"
              className={`w-full rounded-lg border px-4 py-3 text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500 ${
                errors.emailOrPhone ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            {errors.emailOrPhone && (
              <p className="mt-1 text-sm text-red-600">{errors.emailOrPhone}</p>
            )}
          </div>

          {/* Password field */}
          <div>
            <label htmlFor="password" className="mb-2 block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              placeholder="Enter your password"
              className={`w-full rounded-lg border px-4 py-3 text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500 ${
                errors.password ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>

          {/* Forgot password */}
          <div className="text-right">
            <button
              type="button"
              onClick={handleForgotPassword}
              className="text-sm text-emerald-600 hover:text-emerald-700 transition-colors"
            >
              Forgot Password?
            </button>
          </div>

          {/* Submit button */}
          <button
            type="submit"
            disabled={isLoading}
            className="w-full rounded-lg bg-emerald-500 px-6 py-3 text-white font-medium transition hover:bg-emerald-600 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Signing In...' : 'Sign In'}
          </button>
        </form>

        {/* Divider */}
        <div className="my-6 flex items-center">
          <div className="flex-1 border-t border-gray-300"></div>
          <span className="px-4 text-sm text-gray-500">or</span>
          <div className="flex-1 border-t border-gray-300"></div>
        </div>

        {/* Create account */}
        <div className="text-center">
          <p className="text-sm text-gray-600">
            Don't have an account?{' '}
            <button
              type="button"
              onClick={handleCreateAccount}
              className="font-medium text-emerald-600 hover:text-emerald-700 transition-colors"
            >
              Create Account
            </button>
          </p>
        </div>

        {/* Admin access */}
        <div className="mt-4 text-center">
          <button
            type="button"
            onClick={() => window.location.href = '/admin'}
            className="text-sm font-medium text-gray-500 hover:text-gray-700 transition-colors border border-gray-300 rounded-lg px-4 py-2 hover:bg-gray-50"
          >
            Admin Dashboard
          </button>
        </div>
      </div>
    </div>
  );
}

/* ===============================
   Shared Page Header Component
   =============================== */
function PageHeader({ 
  setShowOverviewPage, 
  setShowFeaturesPage, 
  setShowAboutPage, 
  setShowDemoPage, 
  setShowLoginPopup 
}) {
  return (
    <div className="fixed top-5 left-5 right-5 z-[10000] h-16 rounded-2xl border-2 border-emerald-500/20 bg-white/5 backdrop-blur-xl shadow-2xl flex items-center justify-between px-6">
      {/* Left menu options */}
      <div className="flex items-center gap-6">
        {[
          { label: "Overview", onClick: () => { setShowOverviewPage(true); setShowFeaturesPage(false); setShowAboutPage(false); setShowDemoPage(false); } },
          { label: "Features", onClick: () => { setShowOverviewPage(false); setShowFeaturesPage(true); setShowAboutPage(false); setShowDemoPage(false); } },
          { label: "About", onClick: () => { setShowOverviewPage(false); setShowFeaturesPage(false); setShowAboutPage(true); setShowDemoPage(false); } },
          { label: "Demo", onClick: () => { setShowDemoPage(true); setShowOverviewPage(false); setShowFeaturesPage(false); setShowAboutPage(false); } },
        ].map((item) => (
          <button
            key={item.label}
            onClick={item.onClick}
            className="text-sm font-medium text-gray-700 hover:text-emerald-600 transition-colors"
          >
            {item.label}
          </button>
        ))}
        <span className="text-gray-400">|</span>
        <button
          onClick={() => setShowLoginPopup(true)}
          className="text-sm font-medium text-gray-700 hover:text-emerald-600 transition-colors"
        >
          Login
        </button>
      </div>

      {/* Center SLA logo */}
      <div className="absolute left-1/2 -translate-x-1/2">
        <button
          onClick={() => { setShowOverviewPage(false); setShowFeaturesPage(false); setShowAboutPage(false); setShowDemoPage(false); }}
          className="text-xl font-bold tracking-[-0.08em] text-black hover:text-emerald-600 transition-colors"
        >
          SLA
        </button>
      </div>

      {/* Right tagline */}
      <div className="text-base font-semibold text-gray-700">sourcing simplified.</div>
    </div>
  );
}

export default function SocFlowChatUI() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [userMenuOpen, setUserMenuOpen] = useState(false);
  const [typingMessage, setTypingMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [hoveredChat, setHoveredChat] = useState(null);
  const [openMenuChat, setOpenMenuChat] = useState(null);
  const [chatHistory, setChatHistory] = useState([]);
  const [hasStartedChat, setHasStartedChat] = useState(false);
  const [showDemoForm, setShowDemoForm] = useState(false);
  const [showDemoPage, setShowDemoPage] = useState(false);
  const [activeDemoIndex, setActiveDemoIndex] = useState(0);
  const [currentSection, setCurrentSection] = useState("hero");
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [fadeOpacity, setFadeOpacity] = useState(1);
  const [hoverText, setHoverText] = useState("");
  const [copyrightText, setCopyrightText] = useState("");
  const [showAboutPage, setShowAboutPage] = useState(false);
  const [showOverviewPage, setShowOverviewPage] = useState(false);
  const [showFeaturesPage, setShowFeaturesPage] = useState(false);
  const [showLoginPopup, setShowLoginPopup] = useState(false);
  const [activeDashboardTab, setActiveDashboardTab] = useState("Supply Center");
  const [isDark, setIsDark] = useState(false);

  // Global error listeners
  useEffect(() => {
    const onErr = (e) => { console.error('window.onerror:', e?.error || e); };
    const onRej = (e) => { console.error('window.onunhandledrejection:', e?.reason || e); };
    window.addEventListener('error', onErr);
    window.addEventListener('unhandledrejection', onRej);
    return () => {
      window.removeEventListener('error', onErr);
      window.removeEventListener('unhandledrejection', onRej);
    };
  }, []);

  // Dark mode management (guarded for SSR/dev HMR)
  useEffect(() => {
    try {
      const savedTheme = typeof window !== 'undefined' ? localStorage.getItem('theme') : null;
      const prefersDark = typeof window !== 'undefined' && typeof window.matchMedia === 'function'
        ? window.matchMedia('(prefers-color-scheme: dark)').matches
        : false;
      const shouldBeDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
      setIsDark(shouldBeDark);
      if (shouldBeDark) document.documentElement.classList.add('dark');
      else document.documentElement.classList.remove('dark');
    } catch (e) {
      console.warn('Theme init failed', e);
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDark;
    setIsDark(newTheme);
    try { localStorage.setItem('theme', newTheme ? 'dark' : 'light'); } catch {}
    if (newTheme) document.documentElement.classList.add('dark');
    else document.documentElement.classList.remove('dark');
  };

  // Rotating messages
  const rotatingMessages = [
    "AI-Powered Access to 10,000+ Factories and Suppliers",
    "Search and connect with pre-vetted factories worldwide",
    "Instant AI-matched suppliers for your product needs",
    "10K+ factories, loaded with pricing, MOQs, and certifications",
    "Factory sourcing made simple, fast, and transparent",
    "From search to shipment—manage your entire supply chain in one place",
    "Smarter sourcing: AI suggestions tailored to your specs",
    "Track lead times, costs, and factory updates in real time",
    "Your single dashboard for global manufacturing partners",
    "Cut sourcing time in half with AI-driven insights",
    "End-to-end visibility from factory floor to final delivery",
  ];
  
  const messagesEndRef = useRef(null);
  const scrollToBottom = () => messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });

  // Scroll nav helpers
  const getNextSection = () => {
    switch (currentSection) {
      case "hero":
        return { label: "TRUSTED", href: "#trusted", direction: "down" };
      case "trusted":
        return { label: "VALUE", href: "#value", direction: "down" };
      case "value":
        return { label: "STEPS", href: "#steps", direction: "down" };
      case "steps":
        return { label: "LOCATIONS", href: "#locations", direction: "down" };
      case "locations":
        return { label: "FEATURES", href: "#features", direction: "down" };
      case "features":
        return { label: "TOP", href: "#top", direction: "up" };
      case "bottom":
        return { label: "TOP", href: "#top", direction: "up" };
      default:
        return { label: "TRUSTED", href: "#trusted", direction: "down" };
    }
  };

  const handleNavigation = () => {
    const nextSection = getNextSection();
    if (nextSection.href === "#top") {
      window.scrollTo({ top: 0, behavior: "smooth" });
    } else {
      const targetSection = document.querySelector(nextSection.href);
      if (targetSection) {
        const headerHeight = 100;
        const targetPosition = targetSection.offsetTop - headerHeight;
        window.scrollTo({ top: targetPosition, behavior: "smooth" });
      }
    }
  };

  // Auto-scroll
  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping, typingMessage]);

  // Cycle demo cards
  useSafeInterval(() => {
    setActiveDemoIndex((prev) => (prev + 1) % 3);
  }, 4000);

  // Rotating message fade (kept opacity inline for smoothness)
  useEffect(() => {
    let animationFrame;
    let startTime = null;
    const duration = 4000;
    const fadeDuration = 1000;
    
    const animate = (timestamp) => {
      if (!startTime) startTime = timestamp;
      const elapsed = timestamp - startTime;
      const cycleProgress = (elapsed % duration) / duration;
      
      let opacity;
      if (cycleProgress < fadeDuration / duration) {
        opacity = cycleProgress * (duration / fadeDuration);
      } else if (cycleProgress < (duration - fadeDuration) / duration) {
        opacity = 1;
      } else {
        const fadeOutProgress =
          (cycleProgress - (duration - fadeDuration) / duration) * (duration / fadeDuration);
        opacity = 1 - fadeOutProgress;
      }
      setFadeOpacity(Math.max(0, Math.min(1, opacity)));
      
      if (cycleProgress >= 0.99 && cycleProgress < 1.0) {
        setCurrentMessageIndex((prevIndex) => (prevIndex + 1) % rotatingMessages.length);
      }
      animationFrame = requestAnimationFrame(animate);
    };
    
    animationFrame = requestAnimationFrame(animate);
    return () => animationFrame && cancelAnimationFrame(animationFrame);
  }, [rotatingMessages.length]);

  // Simple copyright typing effect
  useEffect(() => {
    const fullText = "Copyright 2025";
    let i = 0, direction = 1;
    const id = setInterval(() => {
      i += direction;
      if (i >= fullText.length) { i = fullText.length; direction = -1; }
      if (i <= 0) { i = 0; direction = 1; }
      const str = fullText.slice(0, i);
      setCopyrightText(str);
    }, 120);
    return () => clearInterval(id);
  }, []);

  // Scroll detection for landing sections (kept simple)
  useEffect(() => {
    const handleScroll = () => {
      if (messages.length > 0 || hasStartedChat) return;
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const sections = ["hero", "trusted", "value", "steps", "locations", "features"];
      let currentSectionName = "hero";
      const isAtBottom = scrollY + windowHeight >= documentHeight - 100;
      if (isAtBottom) {
        currentSectionName = "bottom";
      } else {
        const headerOffset = 100;
        sections.forEach((id) => {
          const el = document.getElementById(id);
          if (el) {
            const top = el.offsetTop - headerOffset;
            const bottom = top + el.offsetHeight;
            if (scrollY >= top - 10 && scrollY < bottom - 10) currentSectionName = id;
          }
        });
      }
      setCurrentSection(currentSectionName);
    };
    handleScroll();
    window.addEventListener("scroll", handleScroll, { passive: true });
    return () => window.removeEventListener("scroll", handleScroll);
  }, [messages.length, hasStartedChat]);

  const formatResponse = (text) => {
    const paragraphs = text.split("\n\n").filter((p) => p.trim());
    return paragraphs
      .map((p) => {
        const t = p.trim();
        if (/^[\d\-•*]\s/.test(t) || t.includes("•")) {
          const lines = t.split("\n").map((line) => {
            const clean = line.trim();
            if (/^[\d\-•*]\s/.test(clean)) return `    ${clean}`;
            return clean;
          });
          return lines.join("\n");
        }
        if (t === t.toUpperCase() || t.endsWith(":")) return `**${t}**`;
        return t;
      })
      .join("\n\n");
  };

  const typeMessage = (fullMessage, onComplete) => {
    const formattedMessage = formatResponse(fullMessage);
    const words = formattedMessage.split(" ");
    let currentIndex = 0;
    setIsTyping(true);
    setTypingMessage("");
    const typeInterval = setInterval(() => {
      if (currentIndex < words.length) {
        setTypingMessage((prev) => prev + (currentIndex === 0 ? "" : " ") + words[currentIndex]);
        currentIndex++;
      } else {
        clearInterval(typeInterval);
        setIsTyping(false);
        onComplete();
      }
    }, 50);
  };

  const createNewChat = () => {
    setMessages([]);
    const newChat = { id: Date.now(), title: "New conversation", timestamp: "Just now", messages: [] };
    setChatHistory([newChat, ...chatHistory]);
  };

  const deleteChat = (chatId) => {
    setChatHistory(chatHistory.filter((c) => c.id !== chatId));
    if (messages.length > 0 && chatHistory.find((c) => c.id === chatId)?.messages === messages) {
      setMessages([]);
    }
  };

  const sendMessage = async () => {
    if (!input.trim() || isLoading || isTyping) return;
    if (!hasStartedChat) {
      setHasStartedChat(true);
      setSidebarOpen(true);
    }
    const userMessage = { role: "user", content: input };
    const updated = [...messages, userMessage];
    setMessages(updated);
    setInput("");
    setIsLoading(true);
    try {
      const res = await fetch("http://localhost:8000/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: input, history: messages }),
      });
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      const data = await res.json();
      typeMessage(data.reply, () => {
        const botMessage = { role: "assistant", content: data.reply };
        setMessages([...updated, botMessage]);
        if (chatHistory.length > 0) {
          const next = [...chatHistory];
          next[0].messages = [...updated, botMessage];
          next[0].title = input.substring(0, 30) + (input.length > 30 ? "..." : "");
          setChatHistory(next);
        }
      });
    } catch (e) {
      const errorMessage = { 
        role: "assistant", 
        content: `Sorry, I'm having trouble connecting to the chatbot. Error: ${e.message}. Make sure the API server is running on port 8000.`,
      };
      setMessages([...updated, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Debug heartbeat chip */}
      <div className="fixed top-2 right-2 z-[99999] rounded-md bg-black/70 text-white text-[10px] px-2 py-1">
        {hasStartedChat ? `tab:${activeDashboardTab}` : 'landing'} · {process.env.NODE_ENV} · {new Date().toLocaleTimeString()}
      </div>

      {/* Header - only show when in dashboard/app mode */}
      {hasStartedChat && (
        <UIErrorBoundary>
          <Suspense fallback={<div className="h-14 w-full border-b flex items-center px-4">Loading header…</div>}>
            <Header 
              hasStartedChat={hasStartedChat}
              activeDashboardTab={activeDashboardTab}
              setActiveDashboardTab={setActiveDashboardTab}
              setHasStartedChat={setHasStartedChat}
              setMessages={setMessages}
              setShowOverviewPage={setShowOverviewPage}
              setShowAboutPage={setShowAboutPage}
            />
          </Suspense>
        </UIErrorBoundary>
      )}

      {/* Dark mode toggle for home page */}
      {!showAboutPage && !showOverviewPage && !showFeaturesPage && !showDemoPage && !hasStartedChat && (
        <div className="fixed top-24 left-5 z-[10000]">
          <button
            onClick={toggleTheme}
            className="p-3 rounded-xl border border-emerald-500/20 bg-white/10 dark:bg-emerald-900/20 backdrop-blur-sm hover:bg-white/20 dark:hover:bg-emerald-900/30 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50"
          >
            {isDark ? (
              <Sun size={20} className="text-emerald-400" />
            ) : (
              <Moon size={20} className="text-emerald-600" />
            )}
          </button>
        </div>
      )}

      {/* Landing top ribbon (only on hero/marketing page) */}
      {!showAboutPage && !showOverviewPage && !showFeaturesPage && !showDemoPage && !hasStartedChat && (
        <div className="fixed top-5 left-5 right-5 z-[10000] h-16 rounded-2xl border-2 border-emerald-500/20 bg-white/5 dark:bg-emerald-900/10 backdrop-blur-xl shadow-2xl flex items-center justify-between px-6">
          <div className="text-xl font-bold tracking-[-0.08em] text-black dark:text-emerald-400">SLA</div>

          {/* Rotating center message */}
          <div className="absolute left-1/2 -translate-x-1/2 pointer-events-none w-[800px] h-6 flex items-center justify-center">
            <span
              className="text-sm font-medium text-gray-700 dark:text-emerald-300 transition-opacity"
              style={{ opacity: fadeOpacity }}
            >
            {rotatingMessages[currentMessageIndex]}
                  </span>
                </div>

          <div className="text-base font-semibold text-black dark:text-emerald-400">sourcing simplified.</div>

          {/* Hover text bubble */}
        {hoverText && (
            <div className="fixed top-1/2 left-1/2 z-[10001] -translate-x-1/2 -translate-y-1/2 rounded-xl border border-white/40 dark:border-emerald-500/40 bg-white/95 dark:bg-emerald-900/95 backdrop-blur-3xl px-6 py-5 text-center text-sm text-black dark:text-emerald-100 shadow-2xl max-w-md" style={{ 
              top: '50vh', 
              left: '50vw',
              background: 'rgba(255, 255, 255, 0.95)',
              backdropFilter: 'blur(20px) saturate(180%)',
              WebkitBackdropFilter: 'blur(20px) saturate(180%)',
              border: '1px solid rgba(255, 255, 255, 0.4)',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.1)'
            }}>
            {hoverText}
        </div>
        )}
      </div>
      )}

      <div
        className={`flex h-screen w-screen font-sans overflow-x-hidden ${
          hasStartedChat ? "overflow-y-auto" : "overflow-hidden"
        } ${
          messages.length === 0 && !hasStartedChat ? "bg-background" : "bg-gradient-to-br from-gray-50 via-white to-emerald-50 dark:from-neutral-900 dark:via-neutral-800 dark:to-emerald-900/20"
        } ${hasStartedChat ? '' : 'pt-10'}`}
      >
        {/* SIDEBAR (only when in app) */}
        {hasStartedChat && (
          <>
            {/* Mobile overlay */}
            <div
              className={`fixed inset-0 z-40 bg-black/30 md:hidden ${
                sidebarOpen ? "block" : "hidden"
              }`}
              onClick={() => setSidebarOpen(false)}
            />
            <aside
              className={`fixed md:static z-50 md:z-auto inset-y-0 left-0 w-72 bg-card border-r border-border flex flex-col overflow-x-hidden transition-all duration-300 ease-smooth md:transform-none shadow-soft ${
                sidebarOpen ? "translate-x-0" : "-translate-x-full md:translate-x-0"
              }`}
            >

              {/* Navigation */}
              <div className="px-6 py-6 overflow-x-hidden">
                {/* Main */}
                <nav className="mb-6 overflow-x-hidden">
            {[
              { label: "Supply Center", icon: <Home size={16} /> },
              { label: "SLA Search", icon: <Search size={16} /> },
              { label: "Fulfillment", icon: <Package size={16} /> },
              { label: "Saved", icon: <Bookmark size={16} /> },
                  ].map((item) => {
                    const active = activeDashboardTab === item.label;
                    return (
              <button 
                        key={item.label}
                onClick={() => setActiveDashboardTab(item.label)}
                        className={`group flex w-full items-center gap-3 rounded-lg px-4 py-2.5 text-sm font-medium transition-all duration-200 ease-smooth ${
                          active
                            ? "bg-emerald-600 text-white shadow-soft"
                            : "text-muted-foreground hover:bg-muted hover:text-foreground"
                        }`}
                      >
                        <span className="text-base">{item.icon}</span>
                {item.label}
              </button>
                    );
                  })}
          </nav>

                {/* Database */}
                <div className="mb-2 pl-4 text-[11px] font-semibold uppercase tracking-wide text-muted-foreground">
                  Database
            </div>
                <nav className="mb-6 overflow-x-hidden">
              {[
                { label: "Clients", icon: <Users size={16} /> },
                { label: "Orders", icon: <ShoppingCart size={16} /> },
                    { label: "Finances", icon: <Calculator size={16} /> },
                  ].map((item) => {
                    const active = activeDashboardTab === item.label;
                    return (
                <button 
                        key={item.label}
                  onClick={() => setActiveDashboardTab(item.label)}
                        className={`group flex w-full items-center gap-3 rounded-lg px-4 py-2.5 text-sm font-medium transition-all duration-200 ease-smooth ${
                          active
                            ? "bg-emerald-600 text-white shadow-soft"
                            : "text-muted-foreground hover:bg-muted hover:text-foreground"
                        }`}
                      >
                        <span className="text-base">{item.icon}</span>
                  {item.label}
                </button>
                    );
                  })}
            </nav>

                {/* Bottom */}
                <nav className="mb-6">
                  {[
                    { label: "Integrations", icon: <LinkIcon size={16} /> },
                    { label: "Settings", icon: <Settings size={16} /> },
                  ].map((item) => {
                    const active = activeDashboardTab === item.label;
                    return (
                <button 
                        key={item.label}
                  onClick={() => setActiveDashboardTab(item.label)}
                        className={`group flex w-full items-center gap-3 rounded-lg px-4 py-2.5 text-sm font-medium transition-all duration-200 ease-smooth ${
                          active
                            ? "bg-emerald-600 text-white shadow-soft"
                            : "text-muted-foreground hover:bg-muted hover:text-foreground"
                        }`}
                      >
                        <span className="text-base">{item.icon}</span>
                  {item.label}
                </button>
                    );
                  })}
            </nav>

        </div>

            </aside>
          </>
        )}

        {/* MAIN */}
        <div className="flex min-w-0 flex-1 flex-col">
          {/* HERO (landing) */}
          {!hasStartedChat ? (
            <div id="hero" className="relative flex min-h-screen flex-col items-center justify-center bg-background">
              {/* Subtle gradient overlay in bottom right quarter */}
              <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-gradient-to-tl from-muted/2 via-muted/1 to-transparent dark:from-emerald-900/5 dark:via-emerald-900/2 dark:to-transparent blur-xl pointer-events-none"></div>
              <div className="relative z-[1] mx-auto flex min-h-screen w-full max-w-5xl flex-col items-center justify-center px-10 text-center">
                {/* Big SLA letters */}
                <div className="mb-10 mt-[-30px] flex items-end justify-center gap-2 font-black tracking-[-0.08em]">
                  <span className="text-[120px] leading-none text-black dark:text-emerald-400">S</span>
                  <span className="text-[120px] leading-none text-black dark:text-emerald-400">L</span>
                  <span className="text-[120px] leading-none text-black dark:text-emerald-400">A</span>
                        </div>

                <h1 className="mb-2 text-center text-5xl font-light tracking-[-0.05em] text-black dark:text-emerald-300">
                        supply made simple
                    </h1>
                <p className="mx-auto max-w-[700px] text-center text-[13px] font-light italic text-gray-600 dark:text-emerald-200">
          Unify sourcing, fulfillment, logistics, and financials in one AI-powered platform.
        </p>
        <p className="mx-auto max-w-[700px] text-center text-[11px] font-light italic text-gray-500 dark:text-emerald-300 mt-1">
          end-to-end supply chain management
        </p>
                      
                {/* Top links */}
                <div className="mt-10 mb-12 flex flex-wrap items-center justify-center gap-6">
                  {[
                    { label: "Overview", onClick: () => setShowOverviewPage(true) },
                    { label: "Features", onClick: () => setShowFeaturesPage(true) },
                    { label: "About", onClick: () => setShowAboutPage(true) },
                    { label: "Login", onClick: () => setShowLoginPopup(true) },
                  ].map((item) =>
                    item.onClick ? (
                            <button
                        key={item.label}
                        onClick={item.onClick}
                        className={`text-sm font-medium text-gray-700 dark:text-emerald-300 hover:text-black dark:hover:text-emerald-400 hover:underline ${
                          item.label === 'Login' ? 'border border-dashed border-gray-400 dark:border-emerald-500 hover:border-gray-600 dark:hover:border-emerald-400 hover:border-solid px-3 py-1 rounded transition-all duration-200' : ''
                        }`}
                            >
                              {item.label}
                            </button>
                          ) : (
                            <a
                        key={item.label}
                              href={item.href}
                        className={`text-sm font-medium text-gray-700 dark:text-emerald-300 hover:text-black dark:hover:text-emerald-400 hover:underline ${
                          item.label === 'Login' ? 'border border-dashed border-gray-400 dark:border-emerald-500 hover:border-gray-600 dark:hover:border-emerald-400 hover:border-solid px-3 py-1 rounded transition-all duration-200' : ''
                        }`}
                            >
                              {item.label}
                            </a>
                          )
                  )}
                      </div>
                    
                {/* CTAs */}
                <div className="mb-2 flex items-center justify-center">
                      <button 
                        onClick={() => setShowDemoPage(true)}
                    className="rounded-lg border-2 border-black dark:border-emerald-400 bg-white dark:bg-emerald-900/20 px-8 py-3 text-base font-medium text-black dark:text-emerald-300 transition hover:bg-black dark:hover:bg-emerald-800/30 hover:text-white dark:hover:text-emerald-200"
                      >
                          Book Demo
                      </button>
              </div>
                    </div>

              {/* Hover to discover */}
              <div className="absolute bottom-24 left-0 right-0 z-[1] flex items-center justify-center">
                <div className="text-[10.5px] uppercase text-gray-500 dark:text-emerald-400 text-center">Hover to discover</div>
              </div>

              {/* Footer icons row */}
              <div className="absolute bottom-16 left-0 right-0 z-[1] flex items-center justify-between px-10">
                {/* Globe */}
                    <button 
                      onClick={() => setShowAboutPage(true)}
                  className="cursor-pointer"
                  onMouseEnter={() => setHoverText("80+ countries to source from")}
                  onMouseLeave={() => setHoverText("")}
                >
                  <Globe className="h-4 w-4 animate-spin-slow text-black dark:text-emerald-400" />
                      </button>
                      
                {/* Package */}
                      <button 
                      onClick={() => setShowAboutPage(true)}
                  className="cursor-pointer"
                  onMouseEnter={() =>
                    setHoverText(
                      "SLA suggests logistics to help get shipments cleared and to destination/warehouse asap and safely"
                    )
                  }
                  onMouseLeave={() => setHoverText("")}
                >
                  <Package className="h-4 w-4 animate-bounce text-black dark:text-emerald-400" />
                      </button>

                {/* Lightning bolt - positioned right */}
                <div className="flex items-center justify-center ml-12">
                  <button 
                    onClick={() => setShowAboutPage(true)}
                    className="cursor-pointer"
                    onMouseEnter={() => setHoverText("Lightning-fast sourcing with AI-powered speed")}
                    onMouseLeave={() => setHoverText("")}
                  >
                    <Zap className="h-4 w-4 animate-pulse text-black dark:text-emerald-400" />
                  </button>
                </div>

                {/* Search */}
                    <button 
                      onClick={() => setShowAboutPage(true)}
                  className="cursor-pointer"
                  onMouseEnter={() =>
                    setHoverText(
                      "SLA Search uses our AI model to highlight the best match factory at the top of the search"
                    )
                  }
                  onMouseLeave={() => setHoverText("")}
                >
                  <Search className="h-4 w-4 animate-spin-slow-reverse text-black dark:text-emerald-400" />
                    </button>

                    {/* Copyright */}
                <div className="mr-[-40px] min-w-[120px] text-xs text-gray-600 dark:text-emerald-300">
                      {copyrightText}
                  <span className="animate-pulse text-gray-600 dark:text-emerald-300">|</span>
                    </div>
                  </div>
                </div>
            ) : (
            // APP (dashboard)
            <UIErrorBoundary>
              <Suspense fallback={
                <div className="flex-1 grid place-items-center">
                  <div className="text-sm text-muted-foreground">Loading dashboard…</div>
                </div>
              }>
                <Dashboard
                  key={activeDashboardTab} // key helps recover on tab change
                  activeDashboardTab={activeDashboardTab}
                  setActiveDashboardTab={setActiveDashboardTab}
                  setHasStartedChat={setHasStartedChat}
                  setMessages={setMessages}
                  setShowOverviewPage={setShowOverviewPage}
                  setShowAboutPage={setShowAboutPage}
                />
              </Suspense>
            </UIErrorBoundary>
          )}
      </div>
    </div>

      {/* Demo Form Modal */}
      {showDemoForm && (
        <div className="fixed inset-0 z-[2000] grid place-items-center bg-black/50 p-5">
          <div className="max-h-[90vh] w-full max-w-md overflow-y-auto rounded-2xl bg-white p-8 shadow-2xl">
            <div className="mb-6 flex items-center justify-between">
              <h2 className="m-0 text-2xl font-bold text-gray-800">Schedule Your Demo</h2>
              <button
                onClick={() => setShowDemoForm(false)}
                className="rounded p-1 text-2xl text-gray-500 hover:bg-gray-100"
              >
                ×
              </button>
            </div>

            <form
              onSubmit={(e) => {
              e.preventDefault();
              alert("Thank you! We'll be in touch soon to schedule your demo.");
              setShowDemoForm(false);
              }}
              className="space-y-5"
            >
              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Full Name *</label>
                <input
                  type="text"
                  required
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 text-sm outline-none focus:border-gray-400"
                />
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Email *</label>
                <input
                  type="email"
                  required
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 text-sm outline-none focus:border-gray-400"
                />
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Phone Number</label>
                <input
                  type="tel"
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 text-sm outline-none focus:border-gray-400"
                />
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Company Name *</label>
                <input
                  type="text"
                  required
                  className="w-full rounded-lg border border-gray-300 px-4 py-3 text-sm outline-none focus:border-gray-400"
                />
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Company Size</label>
                <select className="w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-sm outline-none focus:border-gray-400">
                  <option value="">Select company size</option>
                  <option value="1-10">1-10 employees</option>
                  <option value="11-50">11-50 employees</option>
                  <option value="51-200">51-200 employees</option>
                  <option value="201-500">201-500 employees</option>
                  <option value="500+">500+ employees</option>
                </select>
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Import/Export Volume</label>
                <select className="w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-sm outline-none focus:border-gray-400">
                  <option value="">Select volume</option>
                  <option value="<100k">Less than $100k annually</option>
                  <option value="100k-500k">$100k - $500k annually</option>
                  <option value="500k-1m">$500k - $1M annually</option>
                  <option value="1m-5m">$1M - $5M annually</option>
                  <option value="5m+">$5M+ annually</option>
                </select>
              </div>

              <div>
                <label className="mb-2 block text-sm font-semibold text-gray-700">Company Type *</label>
                <select
                  required
                  className="w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-sm outline-none focus:border-gray-400"
                >
                  <option value="">Select company type</option>
                  <option value="brand">Brand</option>
                  <option value="sourcing-agent">Sourcing Agent</option>
                  <option value="trading-company">Trading Company</option>
                  <option value="manufacturer">Manufacturer</option>
                  <option value="distributor">Distributor</option>
                  <option value="retailer">Retailer</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <button
                type="submit"
                className="w-full rounded-xl bg-emerald-500 px-4 py-4 text-base font-semibold text-white transition hover:bg-emerald-600"
              >
                Submit & Schedule Demo
              </button>
            </form>
          </div>
        </div>
      )}

      {showLoginPopup && <LoginPopup setShowLoginPopup={setShowLoginPopup} setShowDemoPage={setShowDemoPage} setShowOverviewPage={setShowOverviewPage} setShowFeaturesPage={setShowFeaturesPage} setShowAboutPage={setShowAboutPage} setHasStartedChat={setHasStartedChat} />}
      {showDemoPage && <DemoPage setShowDemoPage={setShowDemoPage} setShowOverviewPage={setShowOverviewPage} setShowFeaturesPage={setShowFeaturesPage} setShowAboutPage={setShowAboutPage} setShowLoginPopup={setShowLoginPopup} />}
      {showOverviewPage && <OverviewPage setShowOverviewPage={setShowOverviewPage} setShowFeaturesPage={setShowFeaturesPage} setShowAboutPage={setShowAboutPage} setShowDemoPage={setShowDemoPage} setShowLoginPopup={setShowLoginPopup} />}
      {showAboutPage && <AboutPage setShowOverviewPage={setShowOverviewPage} setShowFeaturesPage={setShowFeaturesPage} setShowAboutPage={setShowAboutPage} setShowDemoPage={setShowDemoPage} setShowLoginPopup={setShowLoginPopup} />}
      {showFeaturesPage && <FeaturesPage setShowOverviewPage={setShowOverviewPage} setShowFeaturesPage={setShowFeaturesPage} setShowAboutPage={setShowAboutPage} setShowDemoPage={setShowDemoPage} setShowLoginPopup={setShowLoginPopup} />}
    </>
  );
}

/* ===============================
   Overview Page (Tailwind)
   =============================== */
function OverviewPage({ setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setShowDemoPage, setShowLoginPopup }) {
  return (
    <div className="fixed inset-0 z-[9999] overflow-y-auto bg-white">
      {/* Glass floating header */}
      <PageHeader 
        setShowOverviewPage={setShowOverviewPage}
        setShowFeaturesPage={setShowFeaturesPage}
        setShowAboutPage={setShowAboutPage}
        setShowDemoPage={setShowDemoPage}
        setShowLoginPopup={setShowLoginPopup}
      />

      {/* Content */}
      <div className="mx-auto max-w-6xl px-10 pt-32 pb-10">
        <div className="mb-14 text-center">
          <h1 className="mb-4 text-5xl font-light tracking-[-0.04em] text-black">Platform Overview</h1>
          <p className="mx-auto max-w-2xl text-lg leading-relaxed text-gray-600">
            Discover how SLA revolutionizes global sourcing with AI-powered intelligence and comprehensive
            logistics solutions.
          </p>
        </div>

        {/* How it works */}
        <div className="mb-10 rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
          <h2 className="text-center text-3xl font-semibold text-black">How SLA Works</h2>
          <div className="mt-8 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {[
              {
                n: "1",
                title: "Describe Your Needs",
                desc:
                  "Simply describe what you're looking for - product type, quantity, quality requirements, and any specific preferences.",
              },
              {
                n: "2",
                title: "AI-Powered Matching",
                desc:
                  "Our advanced AI analyzes your requirements and instantly matches you with the best factories from our 10,000+ verified database.",
              },
              {
                n: "3",
                title: "Connect & Collaborate",
                desc:
                  "Get connected with matched factories, negotiate terms, and manage your entire sourcing process through our platform.",
              },
            ].map((card) => (
              <div key={card.n} className="text-center">
                <div className="mx-auto mb-4 grid h-16 w-16 place-items-center rounded-full bg-emerald-500/10 text-2xl">
                  {card.n}
              </div>
                <h3 className="mb-2 text-lg font-semibold">{card.title}</h3>
                <p className="text-base leading-relaxed text-gray-600">{card.desc}</p>
            </div>
            ))}
              </div>
            </div>

        {/* Key features */}
        <div className="mb-10 rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
          <h2 className="mb-8 text-center text-3xl font-semibold text-black">Key Features</h2>
          <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
            {[
              {
                icon: <Target size={20} className="mr-2 inline" />,
                title: "Intelligent Factory Matching",
                body:
                  "Our AI analyzes your specifications and matches you with factories that best fit your needs, considering production capacity, quality standards, certifications, and geography.",
              },
              {
                icon: <Globe size={20} className="mr-2 inline" />,
                title: "Global Network Access",
                body:
                  "Access 10,000+ pre-vetted factories across 80+ countries. From major hubs to emerging markets, find the right supplier anywhere.",
              },
              {
                icon: <Zap size={20} className="mr-2 inline" />,
                title: "Lightning-Fast Results",
                body:
                  "Get factory matches in minutes, not weeks. Streamlined process eliminates slow research and outreach phases.",
              },
              {
                icon: <BarChart3 size={20} className="mr-2 inline" />,
                title: "Comprehensive Factory Profiles",
                body:
                  "Capabilities, certifications, quality standards, pricing, MOQs, lead times—everything you need to decide.",
              },
              {
                icon: <Package size={20} className="mr-2 inline" />,
                title: "End-to-End Logistics",
                body:
                  "From customs clearance to final delivery. We coordinate documentation, shipping, and tracking for smooth ops.",
              },
              {
                icon: <Shield size={20} className="mr-2 inline" />,
                title: "Verified & Trusted Partners",
                body:
                  "All factories are pre-vetted for quality, reliability, and compliance. Certifications and credentials verified.",
              },
            ].map((f) => (
              <div key={f.title}>
                <h3 className="mb-2 text-xl font-semibold text-black">
                  {f.icon}
                  {f.title}
              </h3>
                <p className="text-base leading-relaxed text-gray-600">{f.body}</p>
            </div>
            ))}
          </div>
        </div>

        {/* Business applications */}
        <div className="mb-10 rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
          <h2 className="mb-8 text-center text-3xl font-semibold text-black">
            How SLA Transforms Your Business
          </h2>
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2">
            {[
              {
                title: "For Brands & Retailers",
                items: [
                  "Find reliable manufacturers for new product lines",
                  "Diversify supplier base across regions",
                  "Reduce sourcing time from weeks to minutes",
                  "Access competitive pricing and quality",
                  "Scale production capacity as you grow",
                ],
              },
              {
                title: "For Sourcing Agents",
                items: [
                  "Expand factory network instantly",
                  "Deliver faster results to clients",
                  "Access verified suppliers",
                  "Reduce research time; focus on negotiations",
                  "Build stronger client relationships",
                ],
              },
              {
                title: "For Trading Companies",
                items: [
                  "Identify new product opportunities",
                  "Connect with specialized manufacturers",
                  "Streamline supplier onboarding",
                  "Access real-time capacity data",
                  "Optimize supply chain efficiency",
                ],
              },
              {
                title: "For Manufacturers",
                items: [
                  "Find reliable component/material suppliers",
                  "Optimize production costs",
                  "Access specialized partners",
                  "Reduce supply chain risks",
                  "Scale operations with trusted partners",
                ],
              },
            ].map((col) => (
              <div key={col.title}>
                <h3 className="mb-3 text-lg font-semibold text-black">{col.title}</h3>
                <ul className="list-disc space-y-1 pl-5 text-base leading-relaxed text-gray-600">
                  {col.items.map((li) => (
                    <li key={li}>{li}</li>
                  ))}
              </ul>
            </div>
            ))}
            </div>
            </div>

        {/* CTA */}
        <div className="rounded-2xl border border-emerald-500/10 bg-white/80 p-10 text-center shadow-xl backdrop-blur-xl">
          <h2 className="mb-2 text-3xl font-semibold text-black">Ready to Transform Your Sourcing?</h2>
          <p className="mx-auto mb-6 max-w-xl text-lg text-gray-600">
            Join thousands of companies already using SLA to streamline their global sourcing operations.
          </p>
          <div className="flex justify-center">
            <button
              onClick={() => setShowDemoPage(true)}
              className="rounded-lg border-2 border-emerald-500 px-8 py-3 text-base font-medium text-emerald-600 transition hover:bg-emerald-500 hover:text-white"
            >
              Book a Demo
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

/* ===============================
   About Page (Tailwind)
   =============================== */
function AboutPage({ setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setShowDemoPage, setShowLoginPopup }) {
  // Redirect to the new About route
  React.useEffect(() => {
    window.location.href = '/about';
  }, []);

  return (
    <div className="fixed inset-0 z-[9999] overflow-y-auto bg-white flex items-center justify-center">
      <div className="text-center">
        <h2 className="text-xl font-semibold mb-4">Redirecting to About page...</h2>
        <p className="text-gray-600">If you are not redirected automatically, <a href="/about" className="text-emerald-600 underline">click here</a>.</p>
      </div>
    </div>
  );
}

/* ===============================
   Features Page Component
   =============================== */
function FeaturesPage({ setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setShowDemoPage, setShowLoginPopup }) {
  const [showDrawer, setShowDrawer] = useState(false);

  const features = [
    {
      icon: <BarChart3 className="h-8 w-8 text-blue-600" />,
      title: "Full Dashboard",
      description: "Monitor sourcing, fulfillment, quoting, logistics, and financial data in one place."
    },
    {
      icon: <Search className="h-8 w-8 text-green-600" />,
      title: "SLA Search",
      description: "AI-powered sourcing engine indexing 10k+ pre-vetted factories based on user requirements."
    },
    {
      icon: <Calculator className="h-8 w-8 text-purple-600" />,
      title: "Custom AI Quoting",
      description: "Instant, accurate cost estimates tied to product specs and supplier data."
    },
    {
      icon: <Package className="h-8 w-8 text-orange-600" />,
      title: "Production Portfolio",
      description: "Centralized supplier and SKU data, including total order volume, dominant sourcing regions, total COGS and margin, and breakdown by specific suppliers and SKUs."
              </div>
              <h2 className="text-xl font-semibold text-black">80+ Countries to Source From</h2>
            </div>
            <p className="mb-5 text-base leading-relaxed text-gray-600">
              Access a vast network of verified factories across 80+ countries worldwide. From Asia's
              manufacturing powerhouses to emerging markets in Africa and Latin America, SLA connects you
              with the right suppliers wherever they are.
            </p>
            <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-600">
              <li>Pre-vetted suppliers in major manufacturing hubs</li>
              <li>Regional expertise and local market knowledge</li>
              <li>Cultural and language barriers eliminated</li>
              <li>Compliance with international standards</li>
            </ul>
          </div>

          {/* AI Search */}
          <div className="rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
            <div className="mb-6 flex items-center">
              <div className="mr-5 grid h-12 w-12 place-items-center rounded-xl bg-emerald-500/10">
                <Search className="h-6 w-6 text-emerald-500" />
              </div>
              <h2 className="text-xl font-semibold text-black">SLA Search AI Technology</h2>
            </div>
            <p className="mb-5 text-base leading-relaxed text-gray-600">
              Our advanced AI model analyzes your requirements and instantly highlights the best matching
              factory at the top of every search. No more endless scrolling through irrelevant results.
            </p>
            <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-600">
              <li>Intelligent matching based on your specifications</li>
              <li>Quality scores and reliability ratings</li>
              <li>Capacity and capability analysis</li>
              <li>Real-time availability and lead time estimates</li>
            </ul>
          </div>

          {/* Speed */}
          <div className="rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
            <div className="mb-6 flex items-center">
              <div className="mr-5 grid h-12 w-12 place-items-center rounded-xl bg-emerald-500/10">
                <Shield className="h-6 w-6 text-emerald-500" />
              </div>
              <h2 className="text-xl font-semibold text-black">Minutes vs. Weeks</h2>
            </div>
            <p className="mb-5 text-base leading-relaxed text-gray-600">
              Traditional sourcing takes weeks of research, outreach, and negotiations. With SLA, you can
              find and confirm a factory in minutes, not weeks.
            </p>
            <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-600">
              <li>Instant discovery and verification</li>
              <li>Automated communication and negotiations</li>
              <li>Real-time pricing and availability</li>
              <li>Streamlined onboarding and contracting</li>
            </ul>
          </div>

          {/* Logistics */}
          <div className="rounded-2xl border border-emerald-500/10 bg-white/80 p-10 shadow-xl backdrop-blur-xl">
            <div className="mb-6 flex items-center">
              <div className="mr-5 grid h-12 w-12 place-items-center rounded-xl bg-emerald-500/10">
                <Package className="h-6 w-6 text-emerald-500" />
              </div>
              <h2 className="text-xl font-semibold text-black">Complete Logistics Solutions</h2>
            </div>
            <p className="mb-5 text-base leading-relaxed text-gray-600">
              We provide comprehensive logistics support to ensure your shipments are cleared and delivered
              to your destination warehouse quickly and safely.
            </p>
            <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-600">
              <li>Customs clearance and documentation</li>
              <li>Freight forwarding and shipping coordination</li>
              <li>Warehouse management and distribution</li>
              <li>Real-time tracking and delivery updates</li>
            </ul>
          </div>
        </div>

        {/* CTA */}
        <div className="rounded-2xl border border-emerald-500/10 bg-white/80 p-10 text-center shadow-xl backdrop-blur-xl">
          <h2 className="mb-2 text-3xl font-semibold text-black">Ready to Transform Your Sourcing?</h2>
          <p className="mx-auto mb-6 max-w-xl text-lg text-gray-600">
            Join thousands of companies already using SLA to streamline their global sourcing operations.
          </p>
          <div className="flex justify-center">
            <button
              onClick={() => setShowDemoPage(true)}
              className="rounded-lg border-2 border-emerald-500 px-8 py-3 text-base font-medium text-emerald-600 transition hover:bg-emerald-500 hover:text-white"
            >
              Book a Demo
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

/* ===============================
   Features Page Component
   =============================== */
function FeaturesPage({ setShowOverviewPage, setShowFeaturesPage, setShowAboutPage, setShowDemoPage, setShowLoginPopup }) {
  const [showDrawer, setShowDrawer] = useState(false);

  const features = [
    {
      icon: <BarChart3 className="h-8 w-8 text-blue-600" />,
      title: "Full Dashboard",
      description: "Monitor sourcing, fulfillment, quoting, logistics, and financial data in one place."
    },
    {
      icon: <Search className="h-8 w-8 text-green-600" />,
      title: "SLA Search",
      description: "AI-powered sourcing engine indexing 10k+ pre-vetted factories based on user requirements."
    },
    {
      icon: <Calculator className="h-8 w-8 text-purple-600" />,
      title: "Custom AI Quoting",
      description: "Instant, accurate cost estimates tied to product specs and supplier data."
    },
    {
      icon: <Package className="h-8 w-8 text-orange-600" />,
      title: "Production Portfolio",
      description: "Centralized supplier and SKU data, including total order volume, dominant sourcing regions, total COGS and margin, and breakdown by specific suppliers and SKUs."
    },
    {
      icon: <Building2 className="h-8 w-8 text-indigo-600" />,
      title: "Supplier Management",
      description: "Save, track, and monitor your factory network, plus upload your own suppliers."
    },
    {
      icon: <Truck className="h-8 w-8 text-red-600" />,
      title: "Logistics Tracking",
      description: "View live shipment updates and get optimized route and carrier suggestions."
    },
    {
      icon: <Clock className="h-8 w-8 text-yellow-600" />,
      title: "Order Status Monitoring",
      description: "End-to-end order tracking with real-time visibility."
    },
    {
      icon: <Phone className="h-8 w-8 text-teal-600" />,
      title: "Communication Integration",
      description: "Automate and push updates through WhatsApp and email."
    },
    {
      icon: <LinkIcon className="h-8 w-8 text-amber-600" />,
      title: "Alibaba Integration",
      description: "Sync orders and shipment statuses directly into SLA."
    },
    {
      icon: <FileText className="h-8 w-8 text-pink-600" />,
      title: "Invoicing",
      description: "Create and send invoices through the dashboard."
    },
    {
      icon: <DollarSign className="h-8 w-8 text-emerald-600" />,
      title: "Financial Monitoring",
      description: "Manage custom financial metrics with export options for deeper analysis."
    },
    {
      icon: <Zap className="h-8 w-8 text-violet-600" />,
      title: "More Features Coming Soon",
      description: "We are constantly adding new features to enhance your sourcing and supply chain experience."
    }
  ];

  return (
    <div className="fixed inset-0 z-[9999] overflow-y-auto bg-white">
      {/* Glass floating header */}
      <PageHeader 
        setShowOverviewPage={setShowOverviewPage}
        setShowFeaturesPage={setShowFeaturesPage}
        setShowAboutPage={setShowAboutPage}
        setShowDemoPage={setShowDemoPage}
        setShowLoginPopup={setShowLoginPopup}
      />

      {/* Content */}
      <div className="mx-auto max-w-6xl px-10 pt-32 pb-10">
        {/* Header */}
        <div className="mb-16 text-center">
          <h1 className="mb-6 text-5xl font-light tracking-[-0.04em] text-black">
            Platform Features
          </h1>
          <p className="mx-auto max-w-3xl text-xl text-gray-600">
            Comprehensive tools to streamline your sourcing, production, and logistics operations
          </p>
        </div>

        {/* Features Grid */}
        <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {features.map((feature, index) => (
            <div
              key={index}
              className="group rounded-xl border border-gray-200 bg-white p-6 shadow-sm transition-all duration-300 hover:shadow-lg hover:border-gray-300"
            >
              <div className="mb-4 flex h-16 w-16 items-center justify-center rounded-lg bg-gray-50 transition-colors group-hover:bg-gray-100">
                {feature.icon}
              </div>
              <h3 className="mb-3 text-xl font-semibold text-gray-900">
                {feature.title}
              </h3>
              <p className="text-gray-600 leading-relaxed">
                {feature.description}
              </p>
            </div>
          ))}
        </div>

        {/* CTA Section */}
        <div className="mt-20 text-center">
          <h2 className="mb-6 text-3xl font-bold text-gray-900">
            Ready to Get Started?
          </h2>
          <p className="mb-8 text-lg text-gray-600">
            Experience the power of AI-driven sourcing and supply chain management
          </p>
          <div className="flex justify-center">
            <button
              onClick={() => setShowDemoPage(true)}
              className="rounded-lg border-2 border-emerald-500 px-8 py-3 text-base font-medium text-emerald-600 transition hover:bg-emerald-500 hover:text-white"
            >
              Book a Demo
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}/* ============
   Utilities
   ============
   Add these to your Tailwind config if you want slower spins:
   theme.extend.animation = {
     'spin-slow': 'spin 3s linear infinite',
     'spin-slow-reverse': 'spin 3s linear infinite reverse',
   }
*/


